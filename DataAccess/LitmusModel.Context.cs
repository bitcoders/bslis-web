//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SugarLabEntities : DbContext
    {
        public SugarLabEntities()
            : base("name=SugarLabEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AndroidMenue> AndroidMenues { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<KeySampleAnalys> KeySampleAnalyses { get; set; }
        public virtual DbSet<MasterCompany> MasterCompanies { get; set; }
        public virtual DbSet<MasterDepartment> MasterDepartments { get; set; }
        public virtual DbSet<MasterDesignation> MasterDesignations { get; set; }
        public virtual DbSet<MasterMenu> MasterMenus { get; set; }
        public virtual DbSet<MasterParameterCategory> MasterParameterCategories { get; set; }
        public virtual DbSet<MasterParameterSubCategory> MasterParameterSubCategories { get; set; }
        public virtual DbSet<MasterSeason> MasterSeasons { get; set; }
        public virtual DbSet<MasterStoppageType> MasterStoppageTypes { get; set; }
        public virtual DbSet<MasterSubMenu> MasterSubMenus { get; set; }
        public virtual DbSet<MasterUnitAuthority> MasterUnitAuthorities { get; set; }
        public virtual DbSet<MasterVehicle> MasterVehicles { get; set; }
        public virtual DbSet<MeltingAnalys> MeltingAnalyses { get; set; }
        public virtual DbSet<MolassesAnalys> MolassesAnalyses { get; set; }
        public virtual DbSet<TwoHourlyAnalys> TwoHourlyAnalyses { get; set; }
        public virtual DbSet<UserRight> UserRights { get; set; }
        public virtual DbSet<UserVerification> UserVerifications { get; set; }
        public virtual DbSet<MasterDeviceType> MasterDeviceTypes { get; set; }
        public virtual DbSet<MobileDevice> MobileDevices { get; set; }
        public virtual DbSet<RegisteredDevice> RegisteredDevices { get; set; }
        public virtual DbSet<MasterRole> MasterRoles { get; set; }
        public virtual DbSet<NotificationsTicker> NotificationsTickers { get; set; }
        public virtual DbSet<FirebaseNotificationType> FirebaseNotificationTypes { get; set; }
        public virtual DbSet<FirebaseNotificationRight> FirebaseNotificationRights { get; set; }
        public virtual DbSet<MasterUnit> MasterUnits { get; set; }
        public virtual DbSet<ExcelReportDataType> ExcelReportDataTypes { get; set; }
        public virtual DbSet<ExcelReportTemplate> ExcelReportTemplates { get; set; }
        public virtual DbSet<ReportSchemaColumn> ReportSchemaColumns { get; set; }
        public virtual DbSet<ReportSchema> ReportSchemas { get; set; }
        public virtual DbSet<MassecuiteAnalys> MassecuiteAnalyses { get; set; }
        public virtual DbSet<UnitSeason> UnitSeasons { get; set; }
        public virtual DbSet<ValidationParameter> ValidationParameters { get; set; }
        public virtual DbSet<ValidationType> ValidationTypes { get; set; }
        public virtual DbSet<AuditTable> AuditTables { get; set; }
        public virtual DbSet<Stoppage> Stoppages { get; set; }
        public virtual DbSet<PeriodicalStock> PeriodicalStocks { get; set; }
        public virtual DbSet<ReportDetail> ReportDetails { get; set; }
        public virtual DbSet<ProcessedAdditionalData> ProcessedAdditionalDatas { get; set; }
        public virtual DbSet<LedgerLog> LedgerLogs { get; set; }
        public virtual DbSet<StoppageType> StoppageTypes { get; set; }
        public virtual DbSet<MasterStoppageSubType> MasterStoppageSubTypes { get; set; }
        public virtual DbSet<WeatherRecord> WeatherRecords { get; set; }
        public virtual DbSet<WeatherType> WeatherTypes { get; set; }
        public virtual DbSet<CaneType> CaneTypes { get; set; }
        public virtual DbSet<CaneVariety> CaneVarieties { get; set; }
        public virtual DbSet<CaneVarietyGroup> CaneVarietyGroups { get; set; }
        public virtual DbSet<Grower> Growers { get; set; }
        public virtual DbSet<Village> Villages { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<FlexMaster> FlexMasters { get; set; }
        public virtual DbSet<FlexSubMaster> FlexSubMasters { get; set; }
        public virtual DbSet<CaneAnalys> CaneAnalyses { get; set; }
        public virtual DbSet<ledger_data> ledger_data { get; set; }
        public virtual DbSet<OtherRecovery> OtherRecoveries { get; set; }
        public virtual DbSet<PasswordReset> PasswordResets { get; set; }
        public virtual DbSet<EmailConfiguration> EmailConfigurations { get; set; }
        public virtual DbSet<DataAdjustment> DataAdjustments { get; set; }
        public virtual DbSet<MasterUser> MasterUsers { get; set; }
        public virtual DbSet<HourlyAnalys> HourlyAnalyses { get; set; }
        public virtual DbSet<DailyAnalys> DailyAnalyses { get; set; }
    
        public virtual int Proc_Get_MassecuiteAnalyses(Nullable<int> unit_code, Nullable<int> season_code, Nullable<int> param_type_code, string transaction_date, string transaction_time)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var param_type_codeParameter = param_type_code.HasValue ?
                new ObjectParameter("param_type_code", param_type_code) :
                new ObjectParameter("param_type_code", typeof(int));
    
            var transaction_dateParameter = transaction_date != null ?
                new ObjectParameter("transaction_date", transaction_date) :
                new ObjectParameter("transaction_date", typeof(string));
    
            var transaction_timeParameter = transaction_time != null ?
                new ObjectParameter("transaction_time", transaction_time) :
                new ObjectParameter("transaction_time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Get_MassecuiteAnalyses", unit_codeParameter, season_codeParameter, param_type_codeParameter, transaction_dateParameter, transaction_timeParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_one_Result> proc_ledger_page_one(Nullable<int> unit_code, Nullable<int> season_Code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_CodeParameter = season_Code.HasValue ?
                new ObjectParameter("season_Code", season_Code) :
                new ObjectParameter("season_Code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_one_Result>("proc_ledger_page_one", unit_codeParameter, season_CodeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_two_Result> proc_ledger_page_two(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_two_Result>("proc_ledger_page_two", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_eight_Result> proc_ledger_page_eight(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_eight_Result>("proc_ledger_page_eight", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_eleven_Result> proc_ledger_page_eleven(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_eleven_Result>("proc_ledger_page_eleven", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_nine_Result> proc_ledger_page_nine(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_nine_Result>("proc_ledger_page_nine", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_seven_Result> proc_ledger_page_seven(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_seven_Result>("proc_ledger_page_seven", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_six_Result> proc_ledger_page_six(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_six_Result>("proc_ledger_page_six", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_ten_Result> proc_ledger_page_ten(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_ten_Result>("proc_ledger_page_ten", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_three_Result> proc_ledger_page_three(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_three_Result>("proc_ledger_page_three", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_twelve_Result> proc_ledger_page_twelve(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_twelve_Result>("proc_ledger_page_twelve", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_five_Result> proc_ledger_page_five(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_five_Result>("proc_ledger_page_five", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_four_Result> proc_ledger_page_four(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_four_Result>("proc_ledger_page_four", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_ledger_page_thirteen_Result> proc_ledger_page_thirteen(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ledger_page_thirteen_Result>("proc_ledger_page_thirteen", unitCodeParameter, crushingSeasonParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proc_report_comparitive_Result> proc_report_comparitive(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> reportDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("crushingSeason", crushingSeason) :
                new ObjectParameter("crushingSeason", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("reportDate", reportDate) :
                new ObjectParameter("reportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_report_comparitive_Result>("proc_report_comparitive", unitCodeParameter, crushingSeasonParameter, reportDateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_hourly_data_for_period")]
        public virtual IQueryable<func_hourly_data_for_period_Result> func_hourly_data_for_period(Nullable<int> unit_code, Nullable<int> season_code)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_hourly_data_for_period_Result>("[SugarLabEntities].[func_hourly_data_for_period](@unit_code, @season_code)", unit_codeParameter, season_codeParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_massecuite_summary")]
        public virtual IQueryable<func_massecuite_summary_Result> func_massecuite_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> trans_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var trans_dateParameter = trans_date.HasValue ?
                new ObjectParameter("trans_date", trans_date) :
                new ObjectParameter("trans_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_massecuite_summary_Result>("[SugarLabEntities].[func_massecuite_summary](@unit_code, @season_code, @trans_date)", unit_codeParameter, season_codeParameter, trans_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_melting_period_summary")]
        public virtual IQueryable<func_melting_period_summary_Result> func_melting_period_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_melting_period_summary_Result>("[SugarLabEntities].[func_melting_period_summary](@unit_code, @season_code, @from_date, @to_date)", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_meltings_summary")]
        public virtual IQueryable<func_meltings_summary_Result> func_meltings_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> trans_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var trans_dateParameter = trans_date.HasValue ?
                new ObjectParameter("trans_date", trans_date) :
                new ObjectParameter("trans_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_meltings_summary_Result>("[SugarLabEntities].[func_meltings_summary](@unit_code, @season_code, @trans_date)", unit_codeParameter, season_codeParameter, trans_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_molasses_period_summary")]
        public virtual IQueryable<func_molasses_period_summary_Result> func_molasses_period_summary(Nullable<int> unitCode, Nullable<int> seasonCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(int));
    
            var seasonCodeParameter = seasonCode.HasValue ?
                new ObjectParameter("seasonCode", seasonCode) :
                new ObjectParameter("seasonCode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_molasses_period_summary_Result>("[SugarLabEntities].[func_molasses_period_summary](@unitCode, @seasonCode, @fromDate, @toDate)", unitCodeParameter, seasonCodeParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_two_hourly_transaction_summary_for_hours")]
        public virtual IQueryable<func_two_hourly_transaction_summary_for_hours_Result> func_two_hourly_transaction_summary_for_hours(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> process_date, Nullable<int> from_time, Nullable<int> to_time)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var process_dateParameter = process_date.HasValue ?
                new ObjectParameter("process_date", process_date) :
                new ObjectParameter("process_date", typeof(System.DateTime));
    
            var from_timeParameter = from_time.HasValue ?
                new ObjectParameter("from_time", from_time) :
                new ObjectParameter("from_time", typeof(int));
    
            var to_timeParameter = to_time.HasValue ?
                new ObjectParameter("to_time", to_time) :
                new ObjectParameter("to_time", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_two_hourly_transaction_summary_for_hours_Result>("[SugarLabEntities].[func_two_hourly_transaction_summary_for_hours](@unit_code, @season_code, @process_date, @from_time, @to_time)", unit_codeParameter, season_codeParameter, process_dateParameter, from_timeParameter, to_timeParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_two_hourly_transaction_summary")]
        public virtual IQueryable<func_two_hourly_transaction_summary_Result> func_two_hourly_transaction_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> process_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var process_dateParameter = process_date.HasValue ?
                new ObjectParameter("process_date", process_date) :
                new ObjectParameter("process_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_two_hourly_transaction_summary_Result>("[SugarLabEntities].[func_two_hourly_transaction_summary](@unit_code, @season_code, @process_date)", unit_codeParameter, season_codeParameter, process_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_two_hourly_transaction_summary_for_period")]
        public virtual IQueryable<func_two_hourly_transaction_summary_for_period_Result> func_two_hourly_transaction_summary_for_period(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_two_hourly_transaction_summary_for_period_Result>("[SugarLabEntities].[func_two_hourly_transaction_summary_for_period](@unit_code, @season_code, @from_date, @to_date)", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "white_sugar_moisture_for_period")]
        public virtual IQueryable<Nullable<decimal>> white_sugar_moisture_for_period(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_Date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_DateParameter = from_Date.HasValue ?
                new ObjectParameter("from_Date", from_Date) :
                new ObjectParameter("from_Date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<decimal>>("[SugarLabEntities].[white_sugar_moisture_for_period](@unit_code, @season_code, @from_Date, @to_date)", unit_codeParameter, season_codeParameter, from_DateParameter, to_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_melting_period_summary_list")]
        public virtual IQueryable<func_melting_period_summary_list_Result> func_melting_period_summary_list(Nullable<int> unitcode, Nullable<int> seasonCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitcodeParameter = unitcode.HasValue ?
                new ObjectParameter("unitcode", unitcode) :
                new ObjectParameter("unitcode", typeof(int));
    
            var seasonCodeParameter = seasonCode.HasValue ?
                new ObjectParameter("seasonCode", seasonCode) :
                new ObjectParameter("seasonCode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_melting_period_summary_list_Result>("[SugarLabEntities].[func_melting_period_summary_list](@unitcode, @seasonCode, @fromDate, @toDate)", unitcodeParameter, seasonCodeParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_molasses_period_summary_list")]
        public virtual IQueryable<func_molasses_period_summary_list_Result> func_molasses_period_summary_list(Nullable<int> unitCode, Nullable<int> seasonCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(int));
    
            var seasonCodeParameter = seasonCode.HasValue ?
                new ObjectParameter("seasonCode", seasonCode) :
                new ObjectParameter("seasonCode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_molasses_period_summary_list_Result>("[SugarLabEntities].[func_molasses_period_summary_list](@unitCode, @seasonCode, @fromDate, @toDate)", unitCodeParameter, seasonCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int proc_ProcessedAdditionalData(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> process_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var process_dateParameter = process_date.HasValue ?
                new ObjectParameter("process_date", process_date) :
                new ObjectParameter("process_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ProcessedAdditionalData", unit_codeParameter, season_codeParameter, process_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_massecuite_period_summary")]
        public virtual IQueryable<func_massecuite_period_summary_Result> func_massecuite_period_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_massecuite_period_summary_Result>("[SugarLabEntities].[func_massecuite_period_summary](@unit_code, @season_code, @from_date, @to_date)", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_stoppage_data_for_date")]
        public virtual IQueryable<func_stoppage_data_for_date_Result> func_stoppage_data_for_date(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> stoppage_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var stoppage_dateParameter = stoppage_date.HasValue ?
                new ObjectParameter("stoppage_date", stoppage_date) :
                new ObjectParameter("stoppage_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_stoppage_data_for_date_Result>("[SugarLabEntities].[func_stoppage_data_for_date](@unit_code, @season_code, @stoppage_date)", unit_codeParameter, season_codeParameter, stoppage_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_stoppage_data_for_period")]
        public virtual IQueryable<func_stoppage_data_for_period_Result> func_stoppage_data_for_period(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> stoppage_from_date, Nullable<System.DateTime> stoppage_to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var stoppage_from_dateParameter = stoppage_from_date.HasValue ?
                new ObjectParameter("stoppage_from_date", stoppage_from_date) :
                new ObjectParameter("stoppage_from_date", typeof(System.DateTime));
    
            var stoppage_to_dateParameter = stoppage_to_date.HasValue ?
                new ObjectParameter("stoppage_to_date", stoppage_to_date) :
                new ObjectParameter("stoppage_to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_stoppage_data_for_period_Result>("[SugarLabEntities].[func_stoppage_data_for_period](@unit_code, @season_code, @stoppage_from_date, @stoppage_to_date)", unit_codeParameter, season_codeParameter, stoppage_from_dateParameter, stoppage_to_dateParameter);
        }
    
        public virtual ObjectResult<proc_stoppage_headwise_period_summary_Result> proc_stoppage_headwise_period_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, Nullable<bool> previous_season)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var previous_seasonParameter = previous_season.HasValue ?
                new ObjectParameter("previous_season", previous_season) :
                new ObjectParameter("previous_season", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_stoppage_headwise_period_summary_Result>("proc_stoppage_headwise_period_summary", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter, previous_seasonParameter);
        }
    
        public virtual ObjectResult<proc_rpt_cane_analysis_by_sample_date_Result> proc_rpt_cane_analysis_by_sample_date(Nullable<int> unit_code, Nullable<int> seasonCode, Nullable<System.DateTime> sample_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var seasonCodeParameter = seasonCode.HasValue ?
                new ObjectParameter("seasonCode", seasonCode) :
                new ObjectParameter("seasonCode", typeof(int));
    
            var sample_dateParameter = sample_date.HasValue ?
                new ObjectParameter("sample_date", sample_date) :
                new ObjectParameter("sample_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_rpt_cane_analysis_by_sample_date_Result>("proc_rpt_cane_analysis_by_sample_date", unit_codeParameter, seasonCodeParameter, sample_dateParameter);
        }
    
        public virtual int proc_daily_calculation(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> transaction_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var transaction_dateParameter = transaction_date.HasValue ?
                new ObjectParameter("transaction_date", transaction_date) :
                new ObjectParameter("transaction_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_daily_calculation", unit_codeParameter, season_codeParameter, transaction_dateParameter);
        }
    
        public virtual ObjectResult<proc_stoppageSummaryForDate_Result> proc_stoppageSummaryForDate(Nullable<int> unitCode, Nullable<int> crushingSeason, Nullable<System.DateTime> reportDate)
        {
            var unitCodeParameter = unitCode.HasValue ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(int));
    
            var crushingSeasonParameter = crushingSeason.HasValue ?
                new ObjectParameter("CrushingSeason", crushingSeason) :
                new ObjectParameter("CrushingSeason", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_stoppageSummaryForDate_Result>("proc_stoppageSummaryForDate", unitCodeParameter, crushingSeasonParameter, reportDateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_bypass_events_summary_for_period")]
        public virtual IQueryable<func_bypass_events_summary_for_period_Result> func_bypass_events_summary_for_period(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_Date, Nullable<System.DateTime> to_date, Nullable<bool> last_season)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_DateParameter = from_Date.HasValue ?
                new ObjectParameter("from_Date", from_Date) :
                new ObjectParameter("from_Date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var last_seasonParameter = last_season.HasValue ?
                new ObjectParameter("last_season", last_season) :
                new ObjectParameter("last_season", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_bypass_events_summary_for_period_Result>("[SugarLabEntities].[func_bypass_events_summary_for_period](@unit_code, @season_code, @from_Date, @to_date, @last_season)", unit_codeParameter, season_codeParameter, from_DateParameter, to_dateParameter, last_seasonParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_ledger_data_period_summary")]
        public virtual IQueryable<func_ledger_data_period_summary_Result> func_ledger_data_period_summary(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_ledger_data_period_summary_Result>("[SugarLabEntities].[func_ledger_data_period_summary](@unit_code, @season_code, @fromDate, @toDate)", unit_codeParameter, season_codeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int DataProcessing(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> trans_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var trans_dateParameter = trans_date.HasValue ?
                new ObjectParameter("trans_date", trans_date) :
                new ObjectParameter("trans_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataProcessing", unit_codeParameter, season_codeParameter, trans_dateParameter);
        }
    
        public virtual int proc_daily_calculation_for_dates(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_daily_calculation_for_dates", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<proc_stoppages_all_unit_for_day_Result> proc_stoppages_all_unit_for_day(Nullable<int> season_code, Nullable<System.DateTime> stoppage_date)
        {
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var stoppage_dateParameter = stoppage_date.HasValue ?
                new ObjectParameter("stoppage_date", stoppage_date) :
                new ObjectParameter("stoppage_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_stoppages_all_unit_for_day_Result>("proc_stoppages_all_unit_for_day", season_codeParameter, stoppage_dateParameter);
        }
    
        public virtual ObjectResult<proc_summarized_periodical_report_Result> proc_summarized_periodical_report(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, Nullable<bool> last_season_data)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var last_season_dataParameter = last_season_data.HasValue ?
                new ObjectParameter("last_season_data", last_season_data) :
                new ObjectParameter("last_season_data", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_summarized_periodical_report_Result>("proc_summarized_periodical_report", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter, last_season_dataParameter);
        }
    
        public virtual ObjectResult<proc_summarized_report_by_crop_day_Result> proc_summarized_report_by_crop_day(Nullable<int> unit_code, Nullable<int> season_code, Nullable<int> crop_day)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var crop_dayParameter = crop_day.HasValue ?
                new ObjectParameter("crop_day", crop_day) :
                new ObjectParameter("crop_day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_summarized_report_by_crop_day_Result>("proc_summarized_report_by_crop_day", unit_codeParameter, season_codeParameter, crop_dayParameter);
        }
    
        public virtual ObjectResult<usp_cane_diversion_factor_Result> usp_cane_diversion_factor(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> trans_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var trans_dateParameter = trans_date.HasValue ?
                new ObjectParameter("trans_date", trans_date) :
                new ObjectParameter("trans_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_cane_diversion_factor_Result>("usp_cane_diversion_factor", unit_codeParameter, season_codeParameter, trans_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_DailyAnalysesSummaryForDates")]
        public virtual IQueryable<func_DailyAnalysesSummaryForDates_Result> func_DailyAnalysesSummaryForDates(Nullable<int> unit_code, Nullable<int> crushing_season, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var crushing_seasonParameter = crushing_season.HasValue ?
                new ObjectParameter("crushing_season", crushing_season) :
                new ObjectParameter("crushing_season", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_DailyAnalysesSummaryForDates_Result>("[SugarLabEntities].[func_DailyAnalysesSummaryForDates](@unit_code, @crushing_season, @from_date, @to_date)", unit_codeParameter, crushing_seasonParameter, from_dateParameter, to_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_hourly_data_summary_for_date")]
        public virtual IQueryable<func_hourly_data_summary_for_date_Result> func_hourly_data_summary_for_date(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> entry_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var entry_dateParameter = entry_date.HasValue ?
                new ObjectParameter("entry_date", entry_date) :
                new ObjectParameter("entry_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_hourly_data_summary_for_date_Result>("[SugarLabEntities].[func_hourly_data_summary_for_date](@unit_code, @season_code, @entry_date)", unit_codeParameter, season_codeParameter, entry_dateParameter);
        }
    
        [DbFunction("SugarLabEntities", "func_hourly_data_summary_for_period")]
        public virtual IQueryable<func_hourly_data_summary_for_period_Result> func_hourly_data_summary_for_period(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_hourly_data_summary_for_period_Result>("[SugarLabEntities].[func_hourly_data_summary_for_period](@unit_code, @season_code, @from_date, @to_date)", unit_codeParameter, season_codeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<proc_summarized_report_Result> proc_summarized_report(Nullable<int> unit_code, Nullable<int> season_code, Nullable<System.DateTime> report_date, Nullable<bool> last_season_data)
        {
            var unit_codeParameter = unit_code.HasValue ?
                new ObjectParameter("unit_code", unit_code) :
                new ObjectParameter("unit_code", typeof(int));
    
            var season_codeParameter = season_code.HasValue ?
                new ObjectParameter("season_code", season_code) :
                new ObjectParameter("season_code", typeof(int));
    
            var report_dateParameter = report_date.HasValue ?
                new ObjectParameter("report_date", report_date) :
                new ObjectParameter("report_date", typeof(System.DateTime));
    
            var last_season_dataParameter = last_season_data.HasValue ?
                new ObjectParameter("last_season_data", last_season_data) :
                new ObjectParameter("last_season_data", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_summarized_report_Result>("proc_summarized_report", unit_codeParameter, season_codeParameter, report_dateParameter, last_season_dataParameter);
        }
    }
}
